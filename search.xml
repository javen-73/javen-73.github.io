<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[责任链模式]]></title>
    <url>%2Farchives%2F1644716670.html</url>
    <content type="text"><![CDATA[责任链设计模式（Chain of Responsibility Pattern）简单介绍举个栗子，还是拿支付系统来说。用户下了一个订单，那么我们需要处理用户是否使用了优惠券、活动等等 我们把订单处理的整个流程用链表的形式穿插起来，就可以形成一个责任链的形式。 当一个用户下了订单，并使用了优惠券但没有使用活动，在责任链处理中，发现用户没有参加活动，则不进行处理继续调用责任链下一步处理，遇到优惠券Handler的时候，则对其进行操作。 代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public interface BaseHandler&#123; void doSomething(String input,BaseHandler baseHandler);&#125;public class ChainHandler implements BaseHandler&#123; // 责任链全部调度任务 private List&lt;BaseHandler&gt; handlers = new ArrayList&lt;&gt;(); // 责任链下标 private int index; public ChainHandler addHandler(BaseHandler baseHandler)&#123; handlers.add(baseHandler); return this; &#125; public void doSomething(String input,BaseHandler baseHandler)&#123; // 若下标行至数组底部，则不执行 if(index==handlers.size()) return; // 取出任务 BaseHandler handle = handlers.get(index); // 下标向下滑动 index ++; handler.doSomething(input,this); &#125;&#125;public class CouponHandler&#123; @Override public void doSomething(String input,BaseHandler baseHandler)&#123; if("优惠券".equals(input))&#123; System.out.println("优惠券"); // 若是只想在链中只让一个去处理则在处理的链中retur掉 // return; 停止链的调用 &#125; baseHadler.doSomething(input,baseHandler); &#125;&#125;public class ActivityHandler&#123; @Override public void doSomethig(String input,BaseHanndler baseHandler)&#123; if("活动".equals(input))&#123; System.out.println("活动"); &#125; baseHandler.doSomething(input,BaseHandler); &#125;&#125;public class Test&#123; public static void main(String args[])&#123; //创建责任链 ChainHandler chainHandler = new ChainHandler(); //给责任链添加任务 chainHandler.addHandler(new CouponHandler()) .addHandler(new ActivityHandler()); //调用责任链 chainHandler.doSomething("优惠券",chainHandler); &#125;&#125; 小结可能有些人还没有理解这个责任链，不妨先自己用代码写写看。也许多写两边就能明白这个是什么意思啦 じゃあ、まだ今度会いましょう〜]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>责任链设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[策略设计模式]]></title>
    <url>%2Farchives%2F355843973.html</url>
    <content type="text"><![CDATA[策略设计模式 （Strategy Pattern）简单介绍举个栗子，领导让你做一个优惠券系统，比如满减和打折这两种类型的优惠券，这两种券的计算过程，可以看做“策略”。假如在结算的时候，用户使用了满减券，则需要“切换”到满减的策略上计算。 当然满减券也可以继续往下做策略，比如满元减、满件减等等。 策略模式，可以让我们在一个清晰的骨架下开发，当然产生的策略类也会很多。 代码实现123456789101112131415161718192021222324252627282930313233public interface CouponCalculator&#123; // 计算方法 BigDecimal calculator();&#125;// 满减策略public class ReduceCouponCalculator implements CouponCalculator &#123; //满减券计算 BigDecimal calculator()&#123; // TODO ... return new BigDecimal(-5); &#125;&#125;// 打折策略public class DiscountCouponCalculator implements CouponCalculator &#123; //打折券计算 BigDecimal calculator()&#123; // TODO ... return new BigDecimal(-4); &#125;&#125;public class pay&#123; public void pay()&#123; //调用满减策略 CouponCalculator couponCalc = new ReduceCouponCalculator(); BigDecimal reduceMoney = couponCalc.calculator(); // 调用打折策略 CouponCalculator couponCalc = new ReduceCouponCalculator(); BigDecimal reduceMoney = couponCalc.calculator(); &#125;&#125; 小结在使用策略模式中，必须要结合多态的概念进行封装使用。 使用反射和SpringIOC可以灵活调用你的策略。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>策略设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql组内排序]]></title>
    <url>%2Farchives%2F4111870243.html</url>
    <content type="text"><![CDATA[Mysql组内排序说起组内排序上来就有人想说啦，不就搞个子查询就行啦嘛 其实这个方法我试过，根据我的业务是会全表扫描的，贼鸡儿慢 今天说的是另一种方法，先说一下要组内排序的需求 ID 设备编码 创建时间 151869253765566464 865800045644967 2019-06-14 16:06:33 151869253765566465 865800045644967 2019-06-17 11:40:33 154392710449467392 865533030153500 2019-06-21 15:13:52 我一上来就没动脑子就写了SQL 123SELECT * FROM t_xxx GROUP BY 设备编码ORDER BY 创建时间 DESC 但是……事与愿违啊，这个排序根本就没发挥作用，是组外的时间排序 然后就只能考虑用子查询先排序，后分组 12345SELECT * FROM ( SELECT * FROM t_xxx ORDER BY 创建时间 DESC) tmpGROUP BY 设备编码 可是然并卵，还是没有获取到最新的创建时间 那怎么办呢？只能另辟蹊径，从Having上下手？想了半天也没法整 在我思绪万千搜索满屏的CSDN的时候，发现了一个大佬的解决方案 在我这个胸无点墨的人心里只蹦出一个字 使用GROUP_CONCAT，将创建时间全部合并起来，然后再配合ORDER BY 创建时间，对组内时间排序 然后把GROUP_CONCAT 的字段SUB_STRING一下取第一个不就完事儿了嘛~ 话不多说上SQL 12345SELECT 设备编码, SUBSTRING_INDEX(GROUP_CONCAT(创建时间 ORDER BY 创建时间 desc),&apos;,&apos;,1) last_timeFROM t_xxxGROUP BY 设备编码 搞定！而且也走了我的索引]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>组内排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-next主题-gitalk坑]]></title>
    <url>%2Farchives%2F2083171564.html</url>
    <content type="text"><![CDATA[在使用gitment、gitalk中的坑点击登陆调回首页，地址栏报错 error=redirect_uri_mismatch&amp;error_description=The redirect_uri MUST match the registered callback URL for this application.&amp;error_uri= 如果遇到这种情况，请检查你全部的文章，名称是否有空格]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七三阴阳师脚本]]></title>
    <url>%2Farchives%2F2218541845.html</url>
    <content type="text"><![CDATA[更新 2019-07-21 脚本首次制作完成 功能 自动刷御魂（单人、组队） 集火标记 下载地址 阴阳师脚本-七三下载地址 使用问题 这个脚本封号吗？ 我也不知道，反正随机的地方都随机了。我自己测了一天没啥事 还有其他功能？ 暂时还没有，现在支持御魂 能刷魂土吗？ 可以的，单人模式需要您自己手动刷一局，后面脚本默认进魂土的副本 组队支持三个人吗？因为大部分都是单刷或者两人组队，最新一期只支持了两人模式。三个人刷需要3个人都在上车，然后启动辅助 这个脚本收费吗？暂时不收费的 组队模式会自动创建队伍吗？ 不会哦，队长的话需要手动创建一下队伍就好了哦 截图]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>阴阳师</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Feign开启Hystrix报错 NotFallBack Instance]]></title>
    <url>%2Farchives%2F518085647.html</url>
    <content type="text"><![CDATA[1.当我们使用feign开启hystrix的时候，有时候我们会遇到这个问题 java.lang.IllegalStateException: No fallback instance of type class异常。 尽管你的FallBack类上加了Component注解。可仍然提示没有fallback实例。 我们在开发的时候忽略了一个问题。就是引入feign的工程。没有扫描feign接口的包。 所以我们有两种解决方式 在ApplicationClass里面加入ComponentScan 包的路径设置到fallback工程的包 我们将ApplicationClass的包向上提级 比如，我是一个商场的项目com.xxx.mall.api/com.xxx.mall.provider 我们把Application放在com.xxx.mall包底下。增加默认扫描包的范围就行了。同时注解EnableFeignClients也不需要直接具体的包]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Feign</tag>
        <tag>Hystrix</tag>
        <tag>原创</tag>
      </tags>
  </entry>
</search>
